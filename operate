#!/bin/bash

SECONDS=0 # Keeping track of the time taken to deploy the solution

# checking arguments
# Check if the necessary arguments are provided
if [ $# -lt 3 ]; then
    echo "Error: Please specify the openrc, tag, and ssh_key as ar6guments to install"
    echo "For exmple: ./install openrc tag sshkey"
    exit 1
fi
openrc=${1}     # openrc access file
tag=${2}        # tag for identification of items
ssh_key=${3}  # the ssh_key
no_of_servers=$(grep -E '[0-9]' servers.conf) # number of nodes from servers.conf


# Define variables
project_network="${2}_network"
project_subnet="${2}_subnet"
project_keypair="${2}_key"
project_router="${2}_router"
project_security_group="${2}_security_group"
project_haproxy_server="${2}_proxy"
project_bastion_server="${2}_bastion"
project_server="${2}_server"
sshconfig="config"
knownhosts="known_hosts"
hostsfile="hosts"
nodes_yaml="nodes.yaml"

run_status=0 ##ansible run status
echo "$(date) Running operate mode for tag: $tag using $openrc for credentials"
source $openrc

generate_config(){
    bastionfip=$(openstack server list --name $project_bastion_server -c Networks -f value | grep -Po '\d+\.\d+\.\d+\.\d+' | awk 'NR==2')
    haproxyfip=$(openstack server list --name $project_haproxy_server -c Networks -f value | grep -Po '\d+\.\d+\.\d+\.\d+' | awk 'NR==2')
       
    echo "$(date) Generating config file"
    echo "Host $project_bastion_server" >> $sshconfig
    echo "   User ubuntu" >> $sshconfig
    echo "   HostName $bastionfip" >> $sshconfig
    echo "   IdentityFile $ssh_key" >> $sshconfig
    echo "   UserKnownHostsFile /dev/null" >> $sshconfig
    echo "   StrictHostKeyChecking no" >> $sshconfig
    echo "   PasswordAuthentication no" >> $sshconfig
    echo " " >> $sshconfig
    echo "Host $project_haproxy_server" >> $sshconfig
    echo "   User ubuntu" >> $sshconfig
    echo "   HostName $haproxyfip" >> $sshconfig
    echo "   IdentityFile $ssh_key" >> $sshconfig
    echo "   StrictHostKeyChecking no" >> $sshconfig
    echo "   PasswordAuthentication no ">> $sshconfig
    echo "   ProxyJump $project_bastion_server" >> $sshconfig

    # generate hosts file
    echo "[bastion]" >> $hostsfile
    echo "$project_bastion_server" >> $hostsfile
    echo " " >> $hostsfile
    echo "[proxyserver]" >> $hostsfile
    echo "$project_haproxy_server" >> $hostsfile   
    echo " " >> $hostsfile
    echo "[webservers]" >> $hostsfile
    
    # The list of running servers
    
    active_servers=$(openstack server list --status ACTIVE -f value -c Name | grep -oP "${tag}"'_server([0-9]+)')
    
    # Getting IP addresses servers
    for server in $active_servers; do
            ip_address=$(openstack server list --name $server -c Networks -f value | grep -Po  '\d+\.\d+\.\d+\.\d+')
            echo " " >> $sshconfig
            echo "Host $server" >> $sshconfig
            echo "   User ubuntu" >> $sshconfig
            echo "   HostName $ip_address" >> $sshconfig
            echo "   IdentityFile $ssh_key" >> $sshconfig
            echo "   UserKnownHostsFile=~/dev/null" >> $sshconfig
            echo "   StrictHostKeyChecking no" >> $sshconfig
            echo "   PasswordAuthentication no" >> $sshconfig
            echo "   ProxyJump $project_bastion_server" >> $sshconfig 
            echo "$server" >> $hostsfile
            echo "$ip_address" >> $nodes_yaml
    done
   
    echo " " >> $hostsfile
    echo "[all:vars]" >> $hostsfile
    echo "ansible_user=ubuntu" >> $hostsfile
    echo "ansible_ssh_private_key_file=$ssh_key" >> $hostsfile
    echo "ansible_ssh_common_args=' -F $sshconfig '" >> $hostsfile
}

delete_config(){

    for file in "$sshconfig" "$knownhosts" "$hostsfile" "$nodes_yaml"; do
        if [[ -f "$file" ]]; then
            rm "$file"
        fi
    done
}

while true
do
a=true
no_of_servers=$(grep -E '[0-9]' servers.conf) # Fetching the number of nodes from servers.conf
while  [ "$a" = true ]
do
    echo "$(date) We require $no_of_servers nodes as specified in servers.conf"

    existing_servers=$(openstack server list --status ACTIVE --column Name -f value)
    #echo "$(date) $existing_servers existing servers."
    devservers_count=$(grep -c $project_server <<< $existing_servers)
    echo "$(date) $devservers_count nodes available."
    
    total_servers=$(openstack server list --column Name -f value)
    total_count=$(grep -c $project_server <<< $total_servers)



    active_servers=$(openstack server list --status ACTIVE -f value -c Name)
    count_active_servers=$(grep -oP "${project_server}" <<< "${active_servers}" | wc -l)
    # Determine if more servers are needed

    count_active_servers=$(grep -oP "${project_server}" <<< "${active_servers}" | wc -l)


# Determine if more servers are needed
    if (( no_of_servers > count_active_servers )); then
        # Calculate the number of servers to add
        servers_to_add=$((no_of_servers - count_active_servers))

        # Get the list of current active server names
        current_server_names=$(openstack server list --status ACTIVE -f value -c Name)

        # Get the list of inactive (shutoff) server names
        inactive_server_names=$(openstack server list --status SHUTOFF -f value -c Name)

        echo "Inactive Nodes: ${inactive_server_names}."

        # Try to start shutoff servers first
        for server in $inactive_server_names; do
            if (( servers_to_add <= 0 )); then
                break
            fi

            if ! echo "${current_server_names}" | grep -qFx "${server}"; then
                echo "$(date) Starting inactive server: $server"
                openstack server start "$server"
                
                # Wait for the server to become active
                while true; do
                    current_status=$(openstack server show "$server" -f value -c status)
                    if [[ "$current_status" == "ACTIVE" ]]; then
                        break
                    fi
                    sleep 5 # Add a delay to avoid a tight loop
                    
                done
                run_status=1
                echo "$(date) Server $server has been started."
                current_server_names=$(openstack server list --status ACTIVE -f value -c Name)
                ((servers_to_add--))
            fi
        done

        # If still more servers are needed, create new ones
        while (( servers_to_add > 0 )); do
            random_suffix=$((RANDOM % no_of_servers + 1))
            new_server_name="${project_server}${random_suffix}"
            
            used=0
            until [[ used -eq 1 ]]; do
                if echo "${current_server_names}" | grep -qFx "${new_server_name}"; then
                    random_suffix=$((RANDOM % no_of_servers + 1))
                    new_server_name="${project_server}${random_suffix}"
                else
                    used=1
                fi
            done

            echo "$(date) Creating ${servers_to_add} additional nodes."
            echo "New server name: ${new_server_name}"
            
            # Create the new server
            created_node=$(openstack server create --image "Ubuntu 20.04 Focal Fossa x86_64" \
                --key-name "${project_keypair}" \
                --flavor "1C-1GB-20GB" \
                --network "${project_network}" \
                --security-group "${project_security_group}" \
                "${new_server_name}")

            echo "$(date) Node ${new_server_name} created."
            run_status=1
            ((servers_to_add--))
            
            # Wait for the server to become active
            while true; do
                current_status=$(openstack server show "${new_server_name}" -f value -c status)
                if [[ "${current_status}" == "ACTIVE" ]]; then
                    break
                fi
                sleep 5 # Add a delay to avoid a tight loop
                
            done

            # Update the list of current server names
            current_server_names=$(openstack server list --status ACTIVE -f value -c Name)
        done

    elif (( no_of_servers < count_active_servers )); then
        # Handle case where there are too many servers
        echo "$(date) More nodes than required (${no_of_servers}) detected."
        echo "$(date) Initiating removal of excess nodes."
        servers_to_remove=$((count_active_servers - no_of_servers))
        removed_count=0

        while (( removed_count < servers_to_remove )); do
            server_to_remove=$(openstack server list --status ACTIVE -f value -c Name | grep -m1 -oP "${tag}_server[0-9]+")
            openstack server delete "${server_to_remove}" --wait
            echo "$(date) Deleted server ${server_to_remove}."
            ((removed_count++))
        done

    else
        # Handle case where the number of servers is correct
        echo "$(date) The required number of servers (${no_of_servers}) are already running."
    fi

    current_servers=$(openstack server list --status ACTIVE --column Name -f value)
    new_count=$(grep -c $project_server <<< $current_servers)
 
    if [[ "$no_of_servers" == "$new_count" &&  "$run_status" -eq 0 ]]
    then
        echo "$(date) Sleeping 30 seconds. Press CTRL-C if you wish to exit."    
    else
            delete_config
            generate_config
            echo "$(date) Running ansible-playbook"
            ansible-playbook -i "$hostsfile" site.yaml
            sleep 5
            run_status=0
            echo "$(date) Checking node availability through the ${project_bastion_server}."
            curl http://$bastionfip:5000
            echo "$(date) Done, the solution has been deployed."
            echo "$(date) Sleeping 30 seconds. Press CTRL-C if you wish to exit."

    fi
   
    a=false
done
sleep 30
done