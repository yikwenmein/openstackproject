#!/bin/bash

# Check if the necessary arguments are provided
if [ $# -lt 3 ]; then
    echo "Error: Please specify the openrc, tag, and ssh_key as ar6guments to install"
    echo "For exmple: ./install openrc tag sshkey"
    exit 1
fi
openrc=${1}     # openrc access file
tag=${2}        # tag for identification of items
ssh_key=${3}  # the ssh_key
no_of_servers=$(grep -E '[0-9]' servers.conf) # number of nodes from servers.conf

# Record the current time
echo "$(date) Cleaning up $tag using $openrc"

# Source the openrc file
source "$openrc"

# Define variables
project_network="${tag}_network"
project_subnet="${tag}_subnet"
project_keypair="${tag}_key"
project_router="${tag}_router"
project_security_group="${tag}_security_group"
project_haproxy_server="${tag}_proxy"
project_bastion_server="${tag}_bastion"
project_server="${tag}_server"

sshconfig="config"
knownhosts="known_hosts"
hostsfile="hosts"
fip2=$(cat floating_ip2)

# Retrieve and delete servers
servers=$(openstack server list --name "$tag" -c ID -f value)
server_count=$(echo "$servers" | wc -l)

if [ -n "$servers" ]; then
    echo "$(date) $server_count nodes, to be removed"
    for server_id in $servers; do
        openstack server delete "$server_id"
    done
    echo "$(date) $server_count nodes have been removed"
else
    echo "$(date) No nodes to remove"
fi

# Delete the keypair
keypairs=$(openstack keypair list -f value -c Name | grep "$tag*")

if [ -n "$keypairs" ]; then
    for key in $keypairs; do  
        openstack keypair delete "$key"
    done
    echo "$(date) Removing $project_keypair key"
else
    echo "$(date) No keypair to remove."
fi

# Delete floating IPs
floating_ips=$(openstack floating ip list --status DOWN -f value -c "Floating IP Address")

if [ -n "$floating_ips" ]; then
    for fip in $floating_ips; do
        openstack floating ip delete "$fip"
    done
    echo "$(date) Removing all the floating IPs"
else
    echo "$(date) No floating IPs to delete"
fi

# Delete subnets
subnet_ids=$(openstack subnet list --tag "$tag" -c ID -f value)

if [ -n "$subnet_ids" ]; then
    for subnet_id in $subnet_ids; do
        openstack router remove subnet "$project_router" "$subnet_id"
        openstack subnet delete "$subnet_id"
    done
    echo "$(date) Removing $project_subnet subnet"
else
    echo "$(date) No subnets to remove"
fi

# Delete routers
routers=$(openstack router list --tag "$tag" -f value -c Name)

if [ -n "$routers" ]; then
    for router in $routers; do
        openstack router delete "$router"
    done
    echo "$(date) Removing $project_router router" 
else
    echo "$(date) No routers to remove"
fi

# Delete networks
networks=$(openstack network list --tag "$tag" -f value -c Name)

if [ -n "$networks" ]; then
    for network in $networks; do
        openstack network delete "$network"
    done
    echo "$(date) Removing $project_network network"
else
    echo "$(date) No networks to remove"
fi

# Delete security groups
security_groups=$(openstack security group list --tag "$tag" -f value -c Name)

if [ -n "$security_groups" ]; then
    for security_group in $security_groups; do
        openstack security group delete "$security_group"
    done
    echo "$(date) Removing $project_security_group security group"
else
    echo "$(date) No security groups to remove"
fi

# Remove specific files if they exist
for file in "$sshconfig" "$knownhosts" "floating_ip1" "floating_ip2" "$hostsfile"; do
    if [[ -f "$file" ]]; then
        rm "$file"
    fi
done
